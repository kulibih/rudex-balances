{"version":3,"sources":["components/Asset.js","components/Balances.js","App.js","serviceWorker.js","index.js"],"names":["Asset","np","this","props","precision","replace","asset","amount","_this$props","undefined","toFixed","react_default","a","createElement","Component","coreToken","warnMinAmount","BigNumber","warnAccountBalance","warnPoolBalance","okAccountBalance","okPoolBalance","Balances","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","prices","loading","fetch","_this2","axios","get","then","response","tokens","forEach","token","push","name","symbol","minAmount","account","issuer","fetchTokens","fetchPrices","catch","error","console","log","_this3","concat","markets","price","USD","x","setState","_this4","balance","supply","feePool","accumulatedFees","Apis","instance","init_promise","ChainStore","init","FetchChain","getIn","find","i","shiftedBy","dynAssetData","_this$state","columns","title","dataIndex","key","render","val","record","index","href","target","rel","className","isLessThan","isGreaterThan","components_Asset","priceLabel","priceClassName","multipliedBy","table","dataSource","pagination","size","Content","Layout","Header","Footer","App","HashRouter","layout","style","padding","Route","exact","path","component","textAlign","position","bottom","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88a09452.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Asset extends Component {\n\n    shouldComponentUpdate(np) {\n        return (\n            this.props.precision !== np.precision ||\n            this.props.replace !== np.replace ||\n            this.props.asset !== np.asset ||\n            this.props.amount !== np.amount\n        );\n    }\n\n    render() {\n        let {precision, asset, amount} = this.props;\n        if (!asset) return null;\n\n        amount = precision !== undefined ? amount.toFixed(precision) : amount.toFixed();\n\n        return (\n            <span>{amount} <small>{asset.replace(\"RUDEX.\", \"\")}</small></span>\n        );\n    }\n}\n\nexport default Asset;\n\n// AssetName = AssetWrapper(AssetName);\n\n// export default class AssetNameWrapper extends React.Component {\n//     render() {\n//         return <AssetName {...this.props} asset={this.props.name} />;\n//     }\n// }\n","import React, {Component} from \"react\";\n\nimport {Table} from \"antd\";\nimport Asset from \"./Asset\"\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainStore, FetchChain} from \"bitsharesjs\";\nimport BigNumber from \"bignumber.js\"\n\nimport axios from \"axios\";\n\nconst gatewayApi = \"https://gateway.rudex.org/api/v0_3/coins\";\nconst bitsharesApi = \"wss://france.bitshares.apasia.tech/ws\";\n\n\nconst coreToken = {\n    id: \"1.3.0\",\n    symbol: \"BTS\",\n    precision: 5\n};\nconst warnMinAmount = BigNumber(1);\nconst warnAccountBalance = BigNumber(50);\nconst warnPoolBalance = BigNumber(50);\nconst okAccountBalance = BigNumber(100);\nconst okPoolBalance = BigNumber(100);\n\n\nclass Balances extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            prices: {},\n            loading: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetch();\n    }\n\n    fetch() {\n        //this.setState({ loading: true });\n\n        // Make a request for a user with a given ID\n        axios.get(gatewayApi)\n            .then((response) => {\n\n                let tokens = [];\n                response.data.forEach(token => {\n                    tokens.push({\n                        name: token.symbol,\n                        minAmount: token.minAmount,\n                        account: token.issuer,\n                    });\n                });\n\n                this.fetchTokens(tokens);\n                this.fetchPrices(tokens);\n\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n    }\n\n    fetchPrices(tokens) {\n        tokens.forEach(token => {\n\n            axios.get(`https://bitsharescan.com/api/asset/${token.name}/markets?currency=USD&page=1&perPage=10&sort=volume.base&sortDirection=-`)\n                .then((response) => {\n\n                    if (response.data.markets) {\n                        let price = response.data.markets[0].price.USD;\n                        let x = this.state.prices;\n                        x[token.name] = price;\n                        this.setState({\n                            prices: x\n                        });\n                    }\n\n                })\n                .catch(function (error) {\n                    // handle error\n                    console.log(error);\n                });\n        });\n\n    }\n\n\n    fetchTokens(tokens) {\n        let data = this.state.data;\n\n        tokens.forEach(token => {\n            data.push({\n                token: token.name,\n                account: token.account,\n                balance: null,\n                supply: null,\n                feePool: null,\n                accumulatedFees: null,\n                minAmount: null\n            });\n        });\n\n        this.setState({data});\n\n        Apis.instance(bitsharesApi, true).init_promise.then(() => {\n            ChainStore.init(false).then(() => {\n                tokens.forEach(token => {\n                    FetchChain(\"getAsset\", token.name).then(asset => {\n                        FetchChain(\"getAccount\", token.account).then(account => {\n                            FetchChain(\"getObject\", account.getIn([\"balances\", coreToken.id])).then(balance => {\n                                let data = this.state.data;\n                                let x = data.find(i => i.token === token.name);\n\n                                let amount = BigNumber(balance.get(\"balance\")).shiftedBy(-coreToken.precision);\n                                let asset = coreToken.symbol;\n\n                                x.account = account.get(\"name\");\n                                x.balance = {amount, asset};\n                                this.setState({data});\n                            });\n                        });\n\n                        FetchChain(\"getObject\", asset.get(\"dynamic_asset_data_id\")).then(dynAssetData => {\n                            let data = this.state.data;\n                            let x = data.find(i => i.token === token.name);\n                            x.supply = {\n                                amount: BigNumber(dynAssetData.get(\"current_supply\")).shiftedBy(-asset.get(\"precision\")),\n                                asset: asset.get(\"symbol\")\n                            };\n                            x.accumulatedFees = {\n                                amount: BigNumber(dynAssetData.get(\"accumulated_fees\")).shiftedBy(-asset.get(\"precision\")),\n                                asset: asset.get(\"symbol\")\n                            };\n                            x.feePool = {\n                                amount: BigNumber(dynAssetData.get(\"fee_pool\")).shiftedBy(-coreToken.precision),\n                                asset: coreToken.symbol\n                            };\n\n                            // minamount\n                            x.minAmount = {\n                                amount: BigNumber(token.minAmount).shiftedBy(-asset.get(\"precision\")),\n                                asset: asset.get(\"symbol\")\n                            };\n                            this.setState({data});\n                        });\n                    });\n                });\n            });\n        });\n    }\n\n    render() {\n\n        const {data, prices, loading} = this.state;\n\n        const columns = [\n            {\n                title: 'Token',\n                dataIndex: 'token',\n                key: 'token',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/asset/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Account',\n                dataIndex: 'account',\n                key: 'account',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/account/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Balance (BTS)',\n                dataIndex: 'balance',\n                key: 'balance',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnAccountBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okAccountBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Fee Pool (BTS)',\n                dataIndex: 'feePool',\n                key: 'feePool',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnPoolBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okPoolBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Min Deposit',\n                dataIndex: 'minAmount',\n                key: 'minAmount',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n\n                        let price = prices[val.asset];\n                        let priceLabel = null;\n                        if (price) {\n                            price = BigNumber(price).multipliedBy(val.amount);\n\n                            let priceClassName = null;\n                            if (price.isLessThan(warnMinAmount)) priceClassName = \"warn\";\n\n                            priceLabel = <span className={priceClassName}>(${price.toFixed(4)})</span>;\n                        } else {\n                            priceLabel = <span>(?)</span>;\n                        }\n\n                        return <span className={className}>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            /> {priceLabel}\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Accumulated Fees',\n                dataIndex: 'accumulatedFees',\n                key: 'accumulatedFees',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Supply',\n                dataIndex: 'supply',\n                key: 'supply',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            },\n        ];\n\n        return (\n            <Table\n                dataSource={data}\n                columns={columns}\n                pagination={false}\n                loading={loading}\n                size=\"small\"\n            />\n        );\n    }\n}\n\nexport default Balances;\n","import React, {Component} from 'react';\nimport {\n    HashRouter as Router,\n    Route,\n} from 'react-router-dom'\n\nimport './App.css';\n\nimport Balances from \"./components/Balances\";\n\nimport {Layout} from 'antd';\n\nconst {Content, Header, Footer} = Layout;\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Layout className=\"layout\">\n                    <Header>\n                        <h1 className=\"header\">RuDEX Balances</h1>\n                    </Header>\n                    <Content style={{padding: \"10px\"}}>\n                        <div>\n                            <Route exact path=\"/\" component={Balances}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center', position: \"sticky\", bottom: \"0\"}}>\n                        RuDEX © 2019\n                    </Footer>\n                </Layout>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}