{"version":3,"sources":["components/Asset.js","components/Balances.js","App.js","serviceWorker.js","index.js"],"names":["Asset","np","this","props","precision","replace","asset","amount","_this$props","undefined","toFixed","react_default","a","createElement","Component","tokens","coreToken","warnAccountBalance","BigNumber","warnPoolBalance","okAccountBalance","okPoolBalance","Balances","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","loading","fetch","_this2","forEach","token","push","account","balance","supply","feePool","accumulatedFees","setState","Apis","instance","init_promise","then","ChainStore","init","FetchChain","get","issuer","getIn","x","find","i","shiftedBy","dynAssetData","_this$state","columns","title","dataIndex","key","render","val","record","index","href","concat","target","rel","className","isLessThan","isGreaterThan","components_Asset","table","dataSource","pagination","size","Content","Layout","Header","Footer","App","HashRouter","layout","style","padding","Route","exact","path","component","textAlign","position","bottom","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3e2a121.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Asset extends Component {\n\n    shouldComponentUpdate(np) {\n        return (\n            this.props.precision !== np.precision ||\n            this.props.replace !== np.replace ||\n            this.props.asset !== np.asset ||\n            this.props.amount !== np.amount\n        );\n    }\n\n    render() {\n        let {precision, asset, amount} = this.props;\n        if (!asset) return null;\n\n        amount = precision !== undefined ? amount.toFixed(precision) : amount.toFixed();\n\n        return (\n            <span>{amount} <small>{asset.replace(\"RUDEX.\", \"\")}</small></span>\n        );\n    }\n}\n\nexport default Asset;\n\n// AssetName = AssetWrapper(AssetName);\n\n// export default class AssetNameWrapper extends React.Component {\n//     render() {\n//         return <AssetName {...this.props} asset={this.props.name} />;\n//     }\n// }\n","import React, {Component} from \"react\";\n\nimport {Table} from \"antd\";\nimport Asset from \"./Asset\"\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainStore, FetchChain} from \"bitsharesjs\";\nimport BigNumber from \"bignumber.js\"\n\nconst tokens = [\n    \"PPY\",\n    \"RUDEX.WLS\",\n    \"RUDEX.SMOKE\",\n    \"RUDEX.STEEM\",\n    \"RUDEX.SBD\",\n    \"RUDEX.GOLOS\",\n    \"RUDEX.GBG\",\n    \"RUDEX.BTC\",\n    \"RUDEX.ETH\",\n    \"RUDEX.EOS\",\n    \"RUDEX.KRM\",\n    \"RUDEX.GRC\",\n    \"RUDEX.SCR\",\n    // \"RUDEX.VIZ\",\n    // \"RUDEX.TT\",\n    // \"RUDEX.PPC\",\n    // \"RUDEX.DGB\",\n    // \"RUDEX.MUSE\",\n];\n\nconst coreToken = {\n    id: \"1.3.0\",\n    symbol: \"BTS\",\n    precision: 5\n};\nconst warnAccountBalance = BigNumber(50);\nconst warnPoolBalance = BigNumber(50);\nconst okAccountBalance = BigNumber(100);\nconst okPoolBalance = BigNumber(100);\n\n\nclass Balances extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            loading: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetch();\n    }\n\n    fetch() {\n        //this.setState({ loading: true });\n\n        let data = this.state.data;\n\n        tokens.forEach(token => {\n            data.push({\n                token,\n                account: null,\n                balance: null,\n                supply: null,\n                feePool: null,\n                accumulatedFees: null\n            });\n        });\n\n        this.setState({data});\n\n        Apis.instance(\"wss://france.bitshares.apasia.tech/ws\", true).init_promise.then(() => {\n            ChainStore.init(false).then(() => {\n                tokens.forEach(token => {\n                    FetchChain(\"getAsset\", token).then(asset => {\n                        FetchChain(\"getAccount\", asset.get(\"issuer\")).then(issuer => {\n                            FetchChain(\"getObject\", issuer.getIn([\"balances\", coreToken.id])).then(balance => {\n                                let data = this.state.data;\n                                let x = data.find(i => i.token === token);\n\n                                let amount = BigNumber(balance.get(\"balance\")).shiftedBy(-coreToken.precision);\n                                let asset = coreToken.symbol;\n\n                                x.account = issuer.get(\"name\");\n                                x.balance = {amount, asset};\n                                this.setState({data});\n                            });\n                        });\n\n                        FetchChain(\"getObject\", asset.get(\"dynamic_asset_data_id\")).then(dynAssetData => {\n                            let data = this.state.data;\n                            let x = data.find(i => i.token === token);\n                            x.supply = {\n                                amount: BigNumber(dynAssetData.get(\"current_supply\")).shiftedBy(-asset.get(\"precision\")),\n                                asset: asset.get(\"symbol\")\n                            };\n                            x.accumulatedFees = {\n                                amount: BigNumber(dynAssetData.get(\"accumulated_fees\")).shiftedBy(-asset.get(\"precision\")),\n                                asset: asset.get(\"symbol\")\n                            };\n                            x.feePool = {\n                                amount: BigNumber(dynAssetData.get(\"fee_pool\")).shiftedBy(-coreToken.precision),\n                                asset: coreToken.symbol\n                            };\n                            this.setState({data});\n                        });\n                    });\n                });\n            });\n        });\n    }\n\n    render() {\n\n        const {data, loading} = this.state;\n\n        const columns = [\n            {\n                title: 'Token',\n                dataIndex: 'token',\n                key: 'token',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/asset/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Account',\n                dataIndex: 'account',\n                key: 'account',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/account/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Balance (BTS)',\n                dataIndex: 'balance',\n                key: 'balance',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnAccountBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okAccountBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Pool (BTS)',\n                dataIndex: 'feePool',\n                key: 'feePool',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnPoolBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okPoolBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Accumulated Fees',\n                dataIndex: 'accumulatedFees',\n                key: 'accumulatedFees',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Supply',\n                dataIndex: 'supply',\n                key: 'supply',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            },\n        ];\n\n        return (\n            <Table\n                dataSource={data}\n                columns={columns}\n                pagination={false}\n                loading={loading}\n                size=\"small\"\n            />\n        );\n    }\n}\n\nexport default Balances;\n","import React, {Component} from 'react';\nimport {\n    HashRouter as Router,\n    Route,\n} from 'react-router-dom'\n\nimport './App.css';\n\nimport Balances from \"./components/Balances\";\n\nimport {Layout} from 'antd';\n\nconst {Content, Header, Footer} = Layout;\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Layout className=\"layout\">\n                    <Header>\n                        <h1 className=\"header\">RuDEX Balances</h1>\n                    </Header>\n                    <Content style={{padding: \"10px\"}}>\n                        <div>\n                            <Route exact path=\"/\" component={Balances}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center', position: \"sticky\", bottom: \"0\"}}>\n                        RuDEX © 2019\n                    </Footer>\n                </Layout>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}