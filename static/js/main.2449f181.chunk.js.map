{"version":3,"sources":["components/Asset.js","components/Balances.js","App.js","serviceWorker.js","index.js"],"names":["Asset","np","this","props","precision","replace","asset","amount","_this$props","undefined","toFixed","react_default","a","createElement","Component","configUrl","Date","now","coreToken","bitsharesApi","monitor","warnMinAmount","BigNumber","okAccumulatedFees","warnAccountBalance","warnPoolBalance","okAccountBalance","okPoolBalance","Balances","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","data","data2","prices","loading","start","_this2","axios","get","then","response","config","bitshares","gateway","accounts","forEach","account","push","Apis","instance","init_promise","ChainStore","init","fetch","fetchData2","_this3","tokens","token","name","symbol","minAmount","issuer","fetchTokens","fetchPrices","catch","error","console","log","_this4","item","id","balance","min","setState","FetchChain","getIn","x","find","i","shiftedBy","_this5","concat","markets","price","USD","_this6","supply","feePool","accumulatedFees","dynAssetData","_this$state","columns","title","dataIndex","key","render","val","record","index","href","target","rel","className","isLessThan","isGreaterThan","components_Asset","priceLabel","priceClassName","multipliedBy","isGreaterThanOrEqualTo","dividedBy","columns2","table","dataSource","pagination","size","Content","Layout","Header","Footer","App","HashRouter","layout","style","padding","Route","exact","path","component","textAlign","position","bottom","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2449f181.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Asset extends Component {\n\n    shouldComponentUpdate(np) {\n        return (\n            this.props.precision !== np.precision ||\n            this.props.replace !== np.replace ||\n            this.props.asset !== np.asset ||\n            this.props.amount !== np.amount\n        );\n    }\n\n    render() {\n        let {precision, asset, amount} = this.props;\n        if (!asset) return null;\n\n        amount = precision !== undefined ? amount.toFixed(precision) : amount.toFixed();\n\n        return (\n            <span>{amount} <small>{asset.replace(\"RUDEX.\", \"\")}</small></span>\n        );\n    }\n}\n\nexport default Asset;\n\n// AssetName = AssetWrapper(AssetName);\n\n// export default class AssetNameWrapper extends React.Component {\n//     render() {\n//         return <AssetName {...this.props} asset={this.props.name} />;\n//     }\n// }\n","import React, {Component} from \"react\";\n\nimport {Table} from \"antd\";\nimport Asset from \"./Asset\"\n\nimport {Apis} from \"bitsharesjs-ws\";\nimport {ChainStore, FetchChain} from \"bitsharesjs\";\nimport BigNumber from \"bignumber.js\"\n\nimport axios from \"axios\";\n\nconst gatewayApi = \"https://gateway.rudex.org/api/v0_3/coins\";\nconst configUrl = \"https://config.blckchnd.com/balances.json?\"+Date.now();\n\nconst coreToken = {\n    id: \"1.3.0\",\n    symbol: \"BTS\",\n    precision: 5\n};\n\nlet bitsharesApi = \"wss://btsfullnode.bangzi.info/ws\";\nlet monitor = [];\nlet warnMinAmount = BigNumber(1);\nlet okAccumulatedFees = BigNumber(100);\nlet warnAccountBalance = BigNumber(50);\nlet warnPoolBalance = BigNumber(50);\nlet okAccountBalance = BigNumber(100);\nlet okPoolBalance = BigNumber(100);\n\n\nclass Balances extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [],\n            data2: [],\n            prices: {},\n            loading: false\n        }\n    }\n\n    componentDidMount() {\n        this.start();\n    }\n\n    start() {\n        axios.get(configUrl)\n            .then((response) => {\n                let config = response.data;\n\n                bitsharesApi = config.bitshares;\n\n\n                if (config.gateway.warnMinAmount)\n                    warnMinAmount = BigNumber(config.gateway.warnMinAmount);\n                if (config.gateway.okAccumulatedFees)\n                    okAccumulatedFees = BigNumber(config.gateway.okAccumulatedFees);\n                if (config.gateway.warnAccountBalance)\n                    warnAccountBalance = BigNumber(config.gateway.warnAccountBalance);\n                if (config.gateway.warnPoolBalance)\n                    warnPoolBalance = BigNumber(config.gateway.warnPoolBalance);\n                if (config.gateway.okAccountBalance)\n                    okAccountBalance = BigNumber(config.gateway.okAccountBalance);\n                if (config.gateway.okPoolBalance)\n                    okPoolBalance = BigNumber(config.gateway.okPoolBalance);\n\n                config.accounts.forEach(account => {\n                    monitor.push(account);\n                });\n\n                Apis.instance(bitsharesApi, true).init_promise.then(() => {\n                    ChainStore.init(false).then(() => {\n                        this.fetch();\n                        this.fetchData2();\n                    })\n                });\n            });\n\n    }\n\n    fetch() {\n        //this.setState({ loading: true });\n\n        // Make a request for a user with a given ID\n        axios.get(gatewayApi)\n            .then((response) => {\n\n                let tokens = [];\n                response.data.forEach(token => {\n                    tokens.push({\n                        name: token.symbol,\n                        minAmount: token.minAmount,\n                        account: token.issuer,\n                    });\n                });\n\n                this.fetchTokens(tokens);\n                this.fetchPrices(tokens);\n\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            });\n    }\n\n    fetchData2() {\n        let data2 = this.state.data2;\n\n        monitor.forEach(item => {\n            data2.push({\n                id: (item[0] + item[1]),\n                account: item[0],\n                token: item[1],\n                balance: null,\n                min: item[2]\n            });\n        });\n\n        this.setState({data2});\n\n        data2.forEach(item => {\n            FetchChain(\"getAsset\", item.token).then(asset => {\n                FetchChain(\"getAccount\", item.account).then(account => {\n                    FetchChain(\"getObject\", account.getIn([\"balances\", asset.get(\"id\")])).then(balance => {\n                        let data2 = this.state.data2;\n                        let x = data2.find(i => i.id === item.id);\n\n                        let amount = BigNumber(balance.get(\"balance\")).shiftedBy(-asset.get(\"precision\"));\n\n                        x.balance = {amount, asset: item.token};\n                        this.setState({data2});\n                    });\n                });\n            });\n        });\n    }\n\n    fetchPrices(tokens) {\n        tokens.forEach(token => {\n\n            axios.get(`https://bitsharescan.com/api/asset/${token.name}/markets?currency=USD&page=1&perPage=10&sort=volume.base&sortDirection=-`)\n                .then((response) => {\n\n                    if (response.data.markets) {\n                        let price = response.data.markets[0].price.USD;\n                        let x = this.state.prices;\n                        x[token.name] = price;\n                        this.setState({\n                            prices: x\n                        });\n                    }\n\n                })\n                .catch(function (error) {\n                    // handle error\n                    console.log(error);\n                });\n        });\n\n    }\n\n    fetchTokens(tokens) {\n        let data = this.state.data;\n\n        tokens.forEach(token => {\n            data.push({\n                token: token.name,\n                account: token.account,\n                balance: null,\n                supply: null,\n                feePool: null,\n                accumulatedFees: null,\n                minAmount: null\n            });\n        });\n\n        this.setState({data});\n\n\n        tokens.forEach(token => {\n            FetchChain(\"getAsset\", token.name).then(asset => {\n                FetchChain(\"getAccount\", token.account).then(account => {\n                    FetchChain(\"getObject\", account.getIn([\"balances\", coreToken.id])).then(balance => {\n                        let data = this.state.data;\n                        let x = data.find(i => i.token === token.name);\n\n                        let amount = BigNumber(balance.get(\"balance\")).shiftedBy(-coreToken.precision);\n                        let asset = coreToken.symbol;\n\n                        x.account = account.get(\"name\");\n                        x.balance = {amount, asset};\n                        this.setState({data});\n                    });\n                });\n\n                FetchChain(\"getObject\", asset.get(\"dynamic_asset_data_id\")).then(dynAssetData => {\n                    let data = this.state.data;\n                    let x = data.find(i => i.token === token.name);\n                    x.supply = {\n                        amount: BigNumber(dynAssetData.get(\"current_supply\")).shiftedBy(-asset.get(\"precision\")),\n                        asset: asset.get(\"symbol\")\n                    };\n                    x.accumulatedFees = {\n                        amount: BigNumber(dynAssetData.get(\"accumulated_fees\")).shiftedBy(-asset.get(\"precision\")),\n                        asset: asset.get(\"symbol\")\n                    };\n                    x.feePool = {\n                        amount: BigNumber(dynAssetData.get(\"fee_pool\")).shiftedBy(-coreToken.precision),\n                        asset: coreToken.symbol\n                    };\n\n                    // minamount\n                    x.minAmount = {\n                        amount: BigNumber(token.minAmount).shiftedBy(-asset.get(\"precision\")),\n                        asset: asset.get(\"symbol\")\n                    };\n                    this.setState({data});\n                });\n            });\n        });\n    }\n\n    render() {\n\n        const {data, prices, loading, data2} = this.state;\n\n        const columns = [\n            {\n                title: 'Token',\n                dataIndex: 'token',\n                key: 'token',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/asset/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Account',\n                dataIndex: 'account',\n                key: 'account',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/account/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Balance (BTS)',\n                dataIndex: 'balance',\n                key: 'balance',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnAccountBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okAccountBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Fee Pool (BTS)',\n                dataIndex: 'feePool',\n                key: 'feePool',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (val.amount.isLessThan(warnPoolBalance)) className = \"warn\";\n                        else if (val.amount.isGreaterThan(okPoolBalance)) className = \"success\";\n                        return <span className={className}>\n                            <Asset\n                                precision={0}\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Min Deposit',\n                dataIndex: 'minAmount',\n                key: 'minAmount',\n                render: (val, record, index) => {\n                    if (val) {\n\n                        let price = prices[val.asset];\n                        let priceLabel = null;\n                        if (price) {\n                            price = BigNumber(price).multipliedBy(val.amount);\n\n                            let priceClassName = null;\n                            if (price.isLessThan(warnMinAmount)) priceClassName = \"warn\";\n\n                            priceLabel = <span className={priceClassName}><small>(${price.toFixed(3)})</small></span>;\n                        } else {\n                            priceLabel = <span>(?)</span>;\n                        }\n\n                        let className = null;\n                        return <span className={className}>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            /> {priceLabel}\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Accumulated Fees',\n                dataIndex: 'accumulatedFees',\n                key: 'accumulatedFees',\n                render: (val, record, index) => {\n                    if (val) {\n                        let price = prices[val.asset];\n                        let priceLabel = null;\n                        if (price) {\n                            price = BigNumber(price).multipliedBy(val.amount);\n\n                            let priceClassName = null;\n                            if (price.isGreaterThanOrEqualTo(okAccumulatedFees)) priceClassName = \"success\";\n\n                            priceLabel = <span className={priceClassName}><small>(${price.toFixed(0)})</small></span>;\n                        } else {\n                            priceLabel = <span>(?)</span>;\n                        }\n\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            /> {priceLabel}\n                        </span>;\n                    }\n                }\n            }, {\n                title: 'Supply',\n                dataIndex: 'supply',\n                key: 'supply',\n                render: (val, record, index) => {\n                    if (val) {\n                        let price = prices[val.asset];\n                        let priceLabel = null;\n                        if (price) {\n                            price = BigNumber(price).multipliedBy(val.amount).dividedBy(1000);\n\n                            priceLabel = <span><small>(${price.toFixed(0)}K)</small></span>;\n                        } else {\n                            priceLabel = <span>(?)</span>;\n                        }\n\n                        return <span>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            /> {priceLabel}\n                        </span>;\n                    }\n                }\n            },\n        ];\n\n        const columns2 = [\n            {\n                title: 'Account',\n                dataIndex: 'account',\n                key: 'account',\n                render: (val, record, index) => {\n                    if (val) {\n                        return <a href={`https://market.rudex.org/#/account/${val}`} target=\"_blank\"\n                                  rel=\"noopener noreferrer\">\n                            {val}\n                        </a>;\n                    }\n                }\n            }, {\n                title: 'Balance',\n                dataIndex: 'balance',\n                key: 'balance',\n                render: (val, record, index) => {\n                    if (val) {\n                        let className = null;\n                        if (record.min) {\n                            let min = BigNumber(record.min);\n                            if (val.amount.isLessThan(min)) className = \"warn\";\n                        }\n\n\n                        return <span className={className}>\n                            <Asset\n                                amount={val.amount}\n                                asset={val.asset}\n                            />\n                        </span>;\n                    }\n                }\n            }\n        ];\n\n        return (\n            <div>\n                <h1>Gateways</h1>\n                <Table\n                    dataSource={data}\n                    columns={columns}\n                    pagination={false}\n                    loading={loading}\n                    size=\"small\"\n                />\n                <h1>Monitoring</h1>\n                <Table\n                    dataSource={data2}\n                    columns={columns2}\n                    pagination={false}\n                    loading={loading}\n                    size=\"small\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default Balances;\n","import React, {Component} from 'react';\nimport {\n    HashRouter as Router,\n    Route,\n} from 'react-router-dom'\n\nimport './App.css';\n\nimport Balances from \"./components/Balances\";\n\nimport {Layout} from 'antd';\n\nconst {Content, Header, Footer} = Layout;\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Layout className=\"layout\">\n                    <Header>\n                        <h1 className=\"header\">RuDEX Balances</h1>\n                    </Header>\n                    <Content style={{padding: \"10px\"}}>\n                        <div>\n                            <Route exact path=\"/\" component={Balances}/>\n                        </div>\n                    </Content>\n                    <Footer style={{textAlign: 'center', position: \"sticky\", bottom: \"0\"}}>\n                        RuDEX © 2019\n                    </Footer>\n                </Layout>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}